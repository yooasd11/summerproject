// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: character.proto

#ifndef PROTOBUF_character_2eproto__INCLUDED
#define PROTOBUF_character_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Character {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_character_2eproto();
void protobuf_AssignDesc_character_2eproto();
void protobuf_ShutdownFile_character_2eproto();

class character;
class NPC;
class Monster;

// ===================================================================

class character : public ::google::protobuf::Message {
 public:
  character();
  virtual ~character();

  character(const character& from);

  inline character& operator=(const character& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const character& default_instance();

  void Swap(character* other);

  // implements Message ----------------------------------------------

  inline character* New() const { return New(NULL); }

  character* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const character& from);
  void MergeFrom(const character& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(character* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string chat = 2;
  bool has_chat() const;
  void clear_chat();
  static const int kChatFieldNumber = 2;
  const ::std::string& chat() const;
  void set_chat(const ::std::string& value);
  void set_chat(const char* value);
  void set_chat(const char* value, size_t size);
  ::std::string* mutable_chat();
  ::std::string* release_chat();
  void set_allocated_chat(::std::string* chat);

  // @@protoc_insertion_point(class_scope:Character.character)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_chat();
  inline void clear_has_chat();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr chat_;
  friend void  protobuf_AddDesc_character_2eproto();
  friend void protobuf_AssignDesc_character_2eproto();
  friend void protobuf_ShutdownFile_character_2eproto();

  void InitAsDefaultInstance();
  static character* default_instance_;
};
// -------------------------------------------------------------------

class NPC : public ::google::protobuf::Message {
 public:
  NPC();
  virtual ~NPC();

  NPC(const NPC& from);

  inline NPC& operator=(const NPC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NPC& default_instance();

  void Swap(NPC* other);

  // implements Message ----------------------------------------------

  inline NPC* New() const { return New(NULL); }

  NPC* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NPC& from);
  void MergeFrom(const NPC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NPC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Character.NPC)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_character_2eproto();
  friend void protobuf_AssignDesc_character_2eproto();
  friend void protobuf_ShutdownFile_character_2eproto();

  void InitAsDefaultInstance();
  static NPC* default_instance_;
};
// -------------------------------------------------------------------

class Monster : public ::google::protobuf::Message {
 public:
  Monster();
  virtual ~Monster();

  Monster(const Monster& from);

  inline Monster& operator=(const Monster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Monster& default_instance();

  void Swap(Monster* other);

  // implements Message ----------------------------------------------

  inline Monster* New() const { return New(NULL); }

  Monster* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Monster& from);
  void MergeFrom(const Monster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Monster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 power = 2;
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 2;
  ::google::protobuf::int32 power() const;
  void set_power(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Character.Monster)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_power();
  inline void clear_has_power();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 power_;
  friend void  protobuf_AddDesc_character_2eproto();
  friend void protobuf_AssignDesc_character_2eproto();
  friend void protobuf_ShutdownFile_character_2eproto();

  void InitAsDefaultInstance();
  static Monster* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// character

// required string name = 1;
inline bool character::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void character::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void character::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void character::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& character::name() const {
  // @@protoc_insertion_point(field_get:Character.character.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void character::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Character.character.name)
}
inline void character::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Character.character.name)
}
inline void character::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Character.character.name)
}
inline ::std::string* character::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Character.character.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* character::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void character::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Character.character.name)
}

// required string chat = 2;
inline bool character::has_chat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void character::set_has_chat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void character::clear_has_chat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void character::clear_chat() {
  chat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat();
}
inline const ::std::string& character::chat() const {
  // @@protoc_insertion_point(field_get:Character.character.chat)
  return chat_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void character::set_chat(const ::std::string& value) {
  set_has_chat();
  chat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Character.character.chat)
}
inline void character::set_chat(const char* value) {
  set_has_chat();
  chat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Character.character.chat)
}
inline void character::set_chat(const char* value, size_t size) {
  set_has_chat();
  chat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Character.character.chat)
}
inline ::std::string* character::mutable_chat() {
  set_has_chat();
  // @@protoc_insertion_point(field_mutable:Character.character.chat)
  return chat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* character::release_chat() {
  clear_has_chat();
  return chat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void character::set_allocated_chat(::std::string* chat) {
  if (chat != NULL) {
    set_has_chat();
  } else {
    clear_has_chat();
  }
  chat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat);
  // @@protoc_insertion_point(field_set_allocated:Character.character.chat)
}

// -------------------------------------------------------------------

// NPC

// required string name = 1;
inline bool NPC::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NPC::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NPC::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NPC::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NPC::name() const {
  // @@protoc_insertion_point(field_get:Character.NPC.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NPC::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Character.NPC.name)
}
inline void NPC::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Character.NPC.name)
}
inline void NPC::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Character.NPC.name)
}
inline ::std::string* NPC::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Character.NPC.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NPC::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NPC::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Character.NPC.name)
}

// required int32 x = 2;
inline bool NPC::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NPC::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NPC::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NPC::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 NPC::x() const {
  // @@protoc_insertion_point(field_get:Character.NPC.x)
  return x_;
}
inline void NPC::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Character.NPC.x)
}

// required int32 y = 3;
inline bool NPC::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NPC::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NPC::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NPC::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 NPC::y() const {
  // @@protoc_insertion_point(field_get:Character.NPC.y)
  return y_;
}
inline void NPC::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Character.NPC.y)
}

// -------------------------------------------------------------------

// Monster

// required string name = 1;
inline bool Monster::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Monster::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Monster::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Monster::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Monster::name() const {
  // @@protoc_insertion_point(field_get:Character.Monster.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Monster::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Character.Monster.name)
}
inline void Monster::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Character.Monster.name)
}
inline void Monster::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Character.Monster.name)
}
inline ::std::string* Monster::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Character.Monster.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Monster::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Monster::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Character.Monster.name)
}

// required int32 power = 2;
inline bool Monster::has_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Monster::set_has_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Monster::clear_has_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Monster::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 Monster::power() const {
  // @@protoc_insertion_point(field_get:Character.Monster.power)
  return power_;
}
inline void Monster::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:Character.Monster.power)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Character

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_character_2eproto__INCLUDED
