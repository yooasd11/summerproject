// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatting.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chatting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chatting {

namespace {

const ::google::protobuf::Descriptor* letter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  letter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chatting_2eproto() {
  protobuf_AddDesc_chatting_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chatting.proto");
  GOOGLE_CHECK(file != NULL);
  letter_descriptor_ = file->message_type(0);
  static const int letter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(letter, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(letter, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(letter, y_),
  };
  letter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      letter_descriptor_,
      letter::default_instance_,
      letter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(letter, _has_bits_[0]),
      -1,
      -1,
      sizeof(letter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(letter, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chatting_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      letter_descriptor_, &letter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chatting_2eproto() {
  delete letter::default_instance_;
  delete letter_reflection_;
}

void protobuf_AddDesc_chatting_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016chatting.proto\022\010chatting\",\n\006letter\022\014\n\004"
    "chat\030\001 \002(\t\022\t\n\001x\030\002 \002(\005\022\t\n\001y\030\003 \002(\005", 72);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chatting.proto", &protobuf_RegisterTypes);
  letter::default_instance_ = new letter();
  letter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chatting_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chatting_2eproto {
  StaticDescriptorInitializer_chatting_2eproto() {
    protobuf_AddDesc_chatting_2eproto();
  }
} static_descriptor_initializer_chatting_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int letter::kChatFieldNumber;
const int letter::kXFieldNumber;
const int letter::kYFieldNumber;
#endif  // !_MSC_VER

letter::letter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chatting.letter)
}

void letter::InitAsDefaultInstance() {
}

letter::letter(const letter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chatting.letter)
}

void letter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

letter::~letter() {
  // @@protoc_insertion_point(destructor:chatting.letter)
  SharedDtor();
}

void letter::SharedDtor() {
  chat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void letter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* letter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return letter_descriptor_;
}

const letter& letter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatting_2eproto();
  return *default_instance_;
}

letter* letter::default_instance_ = NULL;

letter* letter::New(::google::protobuf::Arena* arena) const {
  letter* n = new letter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void letter::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<letter*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(x_, y_);
    if (has_chat()) {
      chat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool letter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chatting.letter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chat = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat().data(), this->chat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chatting.letter.chat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chatting.letter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chatting.letter)
  return false;
#undef DO_
}

void letter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chatting.letter)
  // required string chat = 1;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat().data(), this->chat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chatting.letter.chat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chat(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chatting.letter)
}

::google::protobuf::uint8* letter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatting.letter)
  // required string chat = 1;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat().data(), this->chat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chatting.letter.chat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chat(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatting.letter)
  return target;
}

int letter::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_chat()) {
    // required string chat = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat());
  }

  if (has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
int letter::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string chat = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat());

    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void letter::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const letter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const letter>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void letter::MergeFrom(const letter& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat()) {
      set_has_chat();
      chat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_);
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void letter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void letter::CopyFrom(const letter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool letter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void letter::Swap(letter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void letter::InternalSwap(letter* other) {
  chat_.Swap(&other->chat_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata letter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = letter_descriptor_;
  metadata.reflection = letter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// letter

// required string chat = 1;
bool letter::has_chat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void letter::set_has_chat() {
  _has_bits_[0] |= 0x00000001u;
}
void letter::clear_has_chat() {
  _has_bits_[0] &= ~0x00000001u;
}
void letter::clear_chat() {
  chat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat();
}
 const ::std::string& letter::chat() const {
  // @@protoc_insertion_point(field_get:chatting.letter.chat)
  return chat_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void letter::set_chat(const ::std::string& value) {
  set_has_chat();
  chat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatting.letter.chat)
}
 void letter::set_chat(const char* value) {
  set_has_chat();
  chat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatting.letter.chat)
}
 void letter::set_chat(const char* value, size_t size) {
  set_has_chat();
  chat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatting.letter.chat)
}
 ::std::string* letter::mutable_chat() {
  set_has_chat();
  // @@protoc_insertion_point(field_mutable:chatting.letter.chat)
  return chat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* letter::release_chat() {
  clear_has_chat();
  return chat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void letter::set_allocated_chat(::std::string* chat) {
  if (chat != NULL) {
    set_has_chat();
  } else {
    clear_has_chat();
  }
  chat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat);
  // @@protoc_insertion_point(field_set_allocated:chatting.letter.chat)
}

// required int32 x = 2;
bool letter::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void letter::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void letter::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void letter::clear_x() {
  x_ = 0;
  clear_has_x();
}
 ::google::protobuf::int32 letter::x() const {
  // @@protoc_insertion_point(field_get:chatting.letter.x)
  return x_;
}
 void letter::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:chatting.letter.x)
}

// required int32 y = 3;
bool letter::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void letter::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void letter::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void letter::clear_y() {
  y_ = 0;
  clear_has_y();
}
 ::google::protobuf::int32 letter::y() const {
  // @@protoc_insertion_point(field_get:chatting.letter.y)
  return y_;
}
 void letter::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:chatting.letter.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chatting

// @@protoc_insertion_point(global_scope)
