// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatting.proto

#ifndef PROTOBUF_chatting_2eproto__INCLUDED
#define PROTOBUF_chatting_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace chatting {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_chatting_2eproto();
void protobuf_AssignDesc_chatting_2eproto();
void protobuf_ShutdownFile_chatting_2eproto();

class letter;

// ===================================================================

class letter : public ::google::protobuf::Message {
 public:
  letter();
  virtual ~letter();

  letter(const letter& from);

  inline letter& operator=(const letter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const letter& default_instance();

  void Swap(letter* other);

  // implements Message ----------------------------------------------

  inline letter* New() const { return New(NULL); }

  letter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const letter& from);
  void MergeFrom(const letter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(letter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string chat = 1;
  bool has_chat() const;
  void clear_chat();
  static const int kChatFieldNumber = 1;
  const ::std::string& chat() const;
  void set_chat(const ::std::string& value);
  void set_chat(const char* value);
  void set_chat(const char* value, size_t size);
  ::std::string* mutable_chat();
  ::std::string* release_chat();
  void set_allocated_chat(::std::string* chat);

  // required int32 x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chatting.letter)
 private:
  inline void set_has_chat();
  inline void clear_has_chat();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chat_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_chatting_2eproto();
  friend void protobuf_AssignDesc_chatting_2eproto();
  friend void protobuf_ShutdownFile_chatting_2eproto();

  void InitAsDefaultInstance();
  static letter* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// letter

// required string chat = 1;
inline bool letter::has_chat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void letter::set_has_chat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void letter::clear_has_chat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void letter::clear_chat() {
  chat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat();
}
inline const ::std::string& letter::chat() const {
  // @@protoc_insertion_point(field_get:chatting.letter.chat)
  return chat_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void letter::set_chat(const ::std::string& value) {
  set_has_chat();
  chat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatting.letter.chat)
}
inline void letter::set_chat(const char* value) {
  set_has_chat();
  chat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatting.letter.chat)
}
inline void letter::set_chat(const char* value, size_t size) {
  set_has_chat();
  chat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatting.letter.chat)
}
inline ::std::string* letter::mutable_chat() {
  set_has_chat();
  // @@protoc_insertion_point(field_mutable:chatting.letter.chat)
  return chat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* letter::release_chat() {
  clear_has_chat();
  return chat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void letter::set_allocated_chat(::std::string* chat) {
  if (chat != NULL) {
    set_has_chat();
  } else {
    clear_has_chat();
  }
  chat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat);
  // @@protoc_insertion_point(field_set_allocated:chatting.letter.chat)
}

// required int32 x = 2;
inline bool letter::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void letter::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void letter::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void letter::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 letter::x() const {
  // @@protoc_insertion_point(field_get:chatting.letter.x)
  return x_;
}
inline void letter::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:chatting.letter.x)
}

// required int32 y = 3;
inline bool letter::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void letter::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void letter::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void letter::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 letter::y() const {
  // @@protoc_insertion_point(field_get:chatting.letter.y)
  return y_;
}
inline void letter::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:chatting.letter.y)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chatting

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chatting_2eproto__INCLUDED
