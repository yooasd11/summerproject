// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InGamePacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "InGamePacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace InGamePacket {

namespace {

const ::google::protobuf::Descriptor* S_Acceleration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S_Acceleration_reflection_ = NULL;
const ::google::protobuf::Descriptor* C_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C_Move_reflection_ = NULL;
const ::google::protobuf::Descriptor* S_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S_Move_reflection_ = NULL;
const ::google::protobuf::Descriptor* C_Stop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C_Stop_reflection_ = NULL;
const ::google::protobuf::Descriptor* S_Stop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S_Stop_reflection_ = NULL;
const ::google::protobuf::Descriptor* C_Shoot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C_Shoot_reflection_ = NULL;
const ::google::protobuf::Descriptor* S_Shoot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S_Shoot_reflection_ = NULL;
const ::google::protobuf::Descriptor* C_Collision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C_Collision_reflection_ = NULL;
const ::google::protobuf::Descriptor* S_Collision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S_Collision_reflection_ = NULL;
const ::google::protobuf::Descriptor* C_Respawn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C_Respawn_reflection_ = NULL;
const ::google::protobuf::Descriptor* S_Respawn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S_Respawn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_InGamePacket_2eproto() {
  protobuf_AddDesc_InGamePacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "InGamePacket.proto");
  GOOGLE_CHECK(file != NULL);
  S_Acceleration_descriptor_ = file->message_type(0);
  static const int S_Acceleration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Acceleration, ax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Acceleration, ay_),
  };
  S_Acceleration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      S_Acceleration_descriptor_,
      S_Acceleration::default_instance_,
      S_Acceleration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Acceleration, _has_bits_[0]),
      -1,
      -1,
      sizeof(S_Acceleration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Acceleration, _internal_metadata_),
      -1);
  C_Move_descriptor_ = file->message_type(1);
  static const int C_Move_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Move, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Move, unit_vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Move, unit_vy_),
  };
  C_Move_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C_Move_descriptor_,
      C_Move::default_instance_,
      C_Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Move, _has_bits_[0]),
      -1,
      -1,
      sizeof(C_Move),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Move, _internal_metadata_),
      -1);
  S_Move_descriptor_ = file->message_type(2);
  static const int S_Move_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Move, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Move, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Move, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Move, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Move, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Move, acceleration_list_),
  };
  S_Move_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      S_Move_descriptor_,
      S_Move::default_instance_,
      S_Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Move, _has_bits_[0]),
      -1,
      -1,
      sizeof(S_Move),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Move, _internal_metadata_),
      -1);
  C_Stop_descriptor_ = file->message_type(3);
  static const int C_Stop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Stop, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Stop, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Stop, y_),
  };
  C_Stop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C_Stop_descriptor_,
      C_Stop::default_instance_,
      C_Stop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Stop, _has_bits_[0]),
      -1,
      -1,
      sizeof(C_Stop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Stop, _internal_metadata_),
      -1);
  S_Stop_descriptor_ = file->message_type(4);
  static const int S_Stop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Stop, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Stop, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Stop, y_),
  };
  S_Stop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      S_Stop_descriptor_,
      S_Stop::default_instance_,
      S_Stop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Stop, _has_bits_[0]),
      -1,
      -1,
      sizeof(S_Stop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Stop, _internal_metadata_),
      -1);
  C_Shoot_descriptor_ = file->message_type(5);
  static const int C_Shoot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Shoot, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Shoot, unit_vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Shoot, unit_vy_),
  };
  C_Shoot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C_Shoot_descriptor_,
      C_Shoot::default_instance_,
      C_Shoot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Shoot, _has_bits_[0]),
      -1,
      -1,
      sizeof(C_Shoot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Shoot, _internal_metadata_),
      -1);
  S_Shoot_descriptor_ = file->message_type(6);
  static const int S_Shoot_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Shoot, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Shoot, bullet_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Shoot, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Shoot, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Shoot, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Shoot, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Shoot, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Shoot, acceleration_list_),
  };
  S_Shoot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      S_Shoot_descriptor_,
      S_Shoot::default_instance_,
      S_Shoot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Shoot, _has_bits_[0]),
      -1,
      -1,
      sizeof(S_Shoot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Shoot, _internal_metadata_),
      -1);
  C_Collision_descriptor_ = file->message_type(7);
  static const int C_Collision_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Collision, uid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Collision, uid2_),
  };
  C_Collision_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C_Collision_descriptor_,
      C_Collision::default_instance_,
      C_Collision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Collision, _has_bits_[0]),
      -1,
      -1,
      sizeof(C_Collision),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Collision, _internal_metadata_),
      -1);
  S_Collision_descriptor_ = file->message_type(8);
  static const int S_Collision_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Collision, uid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Collision, uid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Collision, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Collision, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Collision, y_),
  };
  S_Collision_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      S_Collision_descriptor_,
      S_Collision::default_instance_,
      S_Collision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Collision, _has_bits_[0]),
      -1,
      -1,
      sizeof(S_Collision),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Collision, _internal_metadata_),
      -1);
  C_Respawn_descriptor_ = file->message_type(9);
  static const int C_Respawn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Respawn, uid_),
  };
  C_Respawn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C_Respawn_descriptor_,
      C_Respawn::default_instance_,
      C_Respawn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Respawn, _has_bits_[0]),
      -1,
      -1,
      sizeof(C_Respawn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C_Respawn, _internal_metadata_),
      -1);
  S_Respawn_descriptor_ = file->message_type(10);
  static const int S_Respawn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Respawn, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Respawn, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Respawn, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Respawn, hp_),
  };
  S_Respawn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      S_Respawn_descriptor_,
      S_Respawn::default_instance_,
      S_Respawn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Respawn, _has_bits_[0]),
      -1,
      -1,
      sizeof(S_Respawn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S_Respawn, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_InGamePacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      S_Acceleration_descriptor_, &S_Acceleration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C_Move_descriptor_, &C_Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      S_Move_descriptor_, &S_Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C_Stop_descriptor_, &C_Stop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      S_Stop_descriptor_, &S_Stop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C_Shoot_descriptor_, &C_Shoot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      S_Shoot_descriptor_, &S_Shoot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C_Collision_descriptor_, &C_Collision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      S_Collision_descriptor_, &S_Collision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C_Respawn_descriptor_, &C_Respawn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      S_Respawn_descriptor_, &S_Respawn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_InGamePacket_2eproto() {
  delete S_Acceleration::default_instance_;
  delete S_Acceleration_reflection_;
  delete C_Move::default_instance_;
  delete C_Move_reflection_;
  delete S_Move::default_instance_;
  delete S_Move_reflection_;
  delete C_Stop::default_instance_;
  delete C_Stop_reflection_;
  delete S_Stop::default_instance_;
  delete S_Stop_reflection_;
  delete C_Shoot::default_instance_;
  delete C_Shoot_reflection_;
  delete S_Shoot::default_instance_;
  delete S_Shoot_reflection_;
  delete C_Collision::default_instance_;
  delete C_Collision_reflection_;
  delete S_Collision::default_instance_;
  delete S_Collision_reflection_;
  delete C_Respawn::default_instance_;
  delete C_Respawn_reflection_;
  delete S_Respawn::default_instance_;
  delete S_Respawn_reflection_;
}

void protobuf_AddDesc_InGamePacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022InGamePacket.proto\022\014InGamePacket\"(\n\016S_"
    "Acceleration\022\n\n\002ax\030\001 \002(\002\022\n\n\002ay\030\002 \002(\002\"7\n\006"
    "C_Move\022\013\n\003uid\030\001 \002(\r\022\017\n\007unit_vx\030\002 \002(\002\022\017\n\007"
    "unit_vy\030\003 \002(\002\"|\n\006S_Move\022\013\n\003uid\030\001 \002(\r\022\t\n\001"
    "x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002\022\n\n\002vx\030\004 \002(\002\022\n\n\002vy\030\005 \002"
    "(\002\0227\n\021acceleration_list\030\006 \003(\0132\034.InGamePa"
    "cket.S_Acceleration\"+\n\006C_Stop\022\013\n\003uid\030\001 \002"
    "(\r\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002\"+\n\006S_Stop\022\013\n\003ui"
    "d\030\001 \002(\r\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002\"8\n\007C_Shoot"
    "\022\013\n\003uid\030\001 \002(\r\022\017\n\007unit_vx\030\002 \002(\002\022\017\n\007unit_v"
    "y\030\003 \002(\002\"\241\001\n\007S_Shoot\022\013\n\003uid\030\001 \002(\r\022\022\n\nbull"
    "et_uid\030\002 \002(\r\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 \002(\002\022\016\n\006da"
    "mage\030\005 \002(\002\022\n\n\002vx\030\006 \002(\002\022\n\n\002vy\030\007 \002(\002\0227\n\021ac"
    "celeration_list\030\010 \003(\0132\034.InGamePacket.S_A"
    "cceleration\")\n\013C_Collision\022\014\n\004uid1\030\001 \002(\r"
    "\022\014\n\004uid2\030\002 \001(\r\"K\n\013S_Collision\022\014\n\004uid1\030\001 "
    "\002(\r\022\014\n\004uid2\030\002 \001(\r\022\n\n\002hp\030\003 \001(\r\022\t\n\001x\030\004 \001(\002"
    "\022\t\n\001y\030\005 \001(\002\"\030\n\tC_Respawn\022\013\n\003uid\030\001 \002(\r\":\n"
    "\tS_Respawn\022\013\n\003uid\030\001 \002(\r\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030"
    "\003 \002(\002\022\n\n\002hp\030\004 \002(\r", 777);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "InGamePacket.proto", &protobuf_RegisterTypes);
  S_Acceleration::default_instance_ = new S_Acceleration();
  C_Move::default_instance_ = new C_Move();
  S_Move::default_instance_ = new S_Move();
  C_Stop::default_instance_ = new C_Stop();
  S_Stop::default_instance_ = new S_Stop();
  C_Shoot::default_instance_ = new C_Shoot();
  S_Shoot::default_instance_ = new S_Shoot();
  C_Collision::default_instance_ = new C_Collision();
  S_Collision::default_instance_ = new S_Collision();
  C_Respawn::default_instance_ = new C_Respawn();
  S_Respawn::default_instance_ = new S_Respawn();
  S_Acceleration::default_instance_->InitAsDefaultInstance();
  C_Move::default_instance_->InitAsDefaultInstance();
  S_Move::default_instance_->InitAsDefaultInstance();
  C_Stop::default_instance_->InitAsDefaultInstance();
  S_Stop::default_instance_->InitAsDefaultInstance();
  C_Shoot::default_instance_->InitAsDefaultInstance();
  S_Shoot::default_instance_->InitAsDefaultInstance();
  C_Collision::default_instance_->InitAsDefaultInstance();
  S_Collision::default_instance_->InitAsDefaultInstance();
  C_Respawn::default_instance_->InitAsDefaultInstance();
  S_Respawn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_InGamePacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_InGamePacket_2eproto {
  StaticDescriptorInitializer_InGamePacket_2eproto() {
    protobuf_AddDesc_InGamePacket_2eproto();
  }
} static_descriptor_initializer_InGamePacket_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int S_Acceleration::kAxFieldNumber;
const int S_Acceleration::kAyFieldNumber;
#endif  // !_MSC_VER

S_Acceleration::S_Acceleration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InGamePacket.S_Acceleration)
}

void S_Acceleration::InitAsDefaultInstance() {
}

S_Acceleration::S_Acceleration(const S_Acceleration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InGamePacket.S_Acceleration)
}

void S_Acceleration::SharedCtor() {
  _cached_size_ = 0;
  ax_ = 0;
  ay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S_Acceleration::~S_Acceleration() {
  // @@protoc_insertion_point(destructor:InGamePacket.S_Acceleration)
  SharedDtor();
}

void S_Acceleration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S_Acceleration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S_Acceleration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S_Acceleration_descriptor_;
}

const S_Acceleration& S_Acceleration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InGamePacket_2eproto();
  return *default_instance_;
}

S_Acceleration* S_Acceleration::default_instance_ = NULL;

S_Acceleration* S_Acceleration::New(::google::protobuf::Arena* arena) const {
  S_Acceleration* n = new S_Acceleration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S_Acceleration::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<S_Acceleration*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ax_, ay_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool S_Acceleration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InGamePacket.S_Acceleration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float ax = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ax_)));
          set_has_ax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ay;
        break;
      }

      // required float ay = 2;
      case 2: {
        if (tag == 21) {
         parse_ay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ay_)));
          set_has_ay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InGamePacket.S_Acceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InGamePacket.S_Acceleration)
  return false;
#undef DO_
}

void S_Acceleration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InGamePacket.S_Acceleration)
  // required float ax = 1;
  if (has_ax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ax(), output);
  }

  // required float ay = 2;
  if (has_ay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InGamePacket.S_Acceleration)
}

::google::protobuf::uint8* S_Acceleration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InGamePacket.S_Acceleration)
  // required float ax = 1;
  if (has_ax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ax(), target);
  }

  // required float ay = 2;
  if (has_ay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InGamePacket.S_Acceleration)
  return target;
}

int S_Acceleration::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_ax()) {
    // required float ax = 1;
    total_size += 1 + 4;
  }

  if (has_ay()) {
    // required float ay = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
int S_Acceleration::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float ax = 1;
    total_size += 1 + 4;

    // required float ay = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S_Acceleration::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const S_Acceleration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const S_Acceleration>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S_Acceleration::MergeFrom(const S_Acceleration& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ax()) {
      set_ax(from.ax());
    }
    if (from.has_ay()) {
      set_ay(from.ay());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void S_Acceleration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Acceleration::CopyFrom(const S_Acceleration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Acceleration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S_Acceleration::Swap(S_Acceleration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S_Acceleration::InternalSwap(S_Acceleration* other) {
  std::swap(ax_, other->ax_);
  std::swap(ay_, other->ay_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S_Acceleration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S_Acceleration_descriptor_;
  metadata.reflection = S_Acceleration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S_Acceleration

// required float ax = 1;
bool S_Acceleration::has_ax() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S_Acceleration::set_has_ax() {
  _has_bits_[0] |= 0x00000001u;
}
void S_Acceleration::clear_has_ax() {
  _has_bits_[0] &= ~0x00000001u;
}
void S_Acceleration::clear_ax() {
  ax_ = 0;
  clear_has_ax();
}
 float S_Acceleration::ax() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Acceleration.ax)
  return ax_;
}
 void S_Acceleration::set_ax(float value) {
  set_has_ax();
  ax_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Acceleration.ax)
}

// required float ay = 2;
bool S_Acceleration::has_ay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S_Acceleration::set_has_ay() {
  _has_bits_[0] |= 0x00000002u;
}
void S_Acceleration::clear_has_ay() {
  _has_bits_[0] &= ~0x00000002u;
}
void S_Acceleration::clear_ay() {
  ay_ = 0;
  clear_has_ay();
}
 float S_Acceleration::ay() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Acceleration.ay)
  return ay_;
}
 void S_Acceleration::set_ay(float value) {
  set_has_ay();
  ay_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Acceleration.ay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int C_Move::kUidFieldNumber;
const int C_Move::kUnitVxFieldNumber;
const int C_Move::kUnitVyFieldNumber;
#endif  // !_MSC_VER

C_Move::C_Move()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InGamePacket.C_Move)
}

void C_Move::InitAsDefaultInstance() {
}

C_Move::C_Move(const C_Move& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InGamePacket.C_Move)
}

void C_Move::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  unit_vx_ = 0;
  unit_vy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C_Move::~C_Move() {
  // @@protoc_insertion_point(destructor:InGamePacket.C_Move)
  SharedDtor();
}

void C_Move::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C_Move_descriptor_;
}

const C_Move& C_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InGamePacket_2eproto();
  return *default_instance_;
}

C_Move* C_Move::default_instance_ = NULL;

C_Move* C_Move::New(::google::protobuf::Arena* arena) const {
  C_Move* n = new C_Move;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C_Move::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<C_Move*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, unit_vy_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InGamePacket.C_Move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_unit_vx;
        break;
      }

      // required float unit_vx = 2;
      case 2: {
        if (tag == 21) {
         parse_unit_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unit_vx_)));
          set_has_unit_vx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_unit_vy;
        break;
      }

      // required float unit_vy = 3;
      case 3: {
        if (tag == 29) {
         parse_unit_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unit_vy_)));
          set_has_unit_vy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InGamePacket.C_Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InGamePacket.C_Move)
  return false;
#undef DO_
}

void C_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InGamePacket.C_Move)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required float unit_vx = 2;
  if (has_unit_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->unit_vx(), output);
  }

  // required float unit_vy = 3;
  if (has_unit_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->unit_vy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InGamePacket.C_Move)
}

::google::protobuf::uint8* C_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InGamePacket.C_Move)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required float unit_vx = 2;
  if (has_unit_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->unit_vx(), target);
  }

  // required float unit_vy = 3;
  if (has_unit_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->unit_vy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InGamePacket.C_Move)
  return target;
}

int C_Move::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_unit_vx()) {
    // required float unit_vx = 2;
    total_size += 1 + 4;
  }

  if (has_unit_vy()) {
    // required float unit_vy = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int C_Move::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required float unit_vx = 2;
    total_size += 1 + 4;

    // required float unit_vy = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C_Move::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const C_Move* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const C_Move>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C_Move::MergeFrom(const C_Move& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_unit_vx()) {
      set_unit_vx(from.unit_vx());
    }
    if (from.has_unit_vy()) {
      set_unit_vy(from.unit_vy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void C_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Move::CopyFrom(const C_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Move::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C_Move::Swap(C_Move* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C_Move::InternalSwap(C_Move* other) {
  std::swap(uid_, other->uid_);
  std::swap(unit_vx_, other->unit_vx_);
  std::swap(unit_vy_, other->unit_vy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C_Move_descriptor_;
  metadata.reflection = C_Move_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C_Move

// required uint32 uid = 1;
bool C_Move::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void C_Move::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void C_Move::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void C_Move::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
 ::google::protobuf::uint32 C_Move::uid() const {
  // @@protoc_insertion_point(field_get:InGamePacket.C_Move.uid)
  return uid_;
}
 void C_Move::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.C_Move.uid)
}

// required float unit_vx = 2;
bool C_Move::has_unit_vx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void C_Move::set_has_unit_vx() {
  _has_bits_[0] |= 0x00000002u;
}
void C_Move::clear_has_unit_vx() {
  _has_bits_[0] &= ~0x00000002u;
}
void C_Move::clear_unit_vx() {
  unit_vx_ = 0;
  clear_has_unit_vx();
}
 float C_Move::unit_vx() const {
  // @@protoc_insertion_point(field_get:InGamePacket.C_Move.unit_vx)
  return unit_vx_;
}
 void C_Move::set_unit_vx(float value) {
  set_has_unit_vx();
  unit_vx_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.C_Move.unit_vx)
}

// required float unit_vy = 3;
bool C_Move::has_unit_vy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void C_Move::set_has_unit_vy() {
  _has_bits_[0] |= 0x00000004u;
}
void C_Move::clear_has_unit_vy() {
  _has_bits_[0] &= ~0x00000004u;
}
void C_Move::clear_unit_vy() {
  unit_vy_ = 0;
  clear_has_unit_vy();
}
 float C_Move::unit_vy() const {
  // @@protoc_insertion_point(field_get:InGamePacket.C_Move.unit_vy)
  return unit_vy_;
}
 void C_Move::set_unit_vy(float value) {
  set_has_unit_vy();
  unit_vy_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.C_Move.unit_vy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int S_Move::kUidFieldNumber;
const int S_Move::kXFieldNumber;
const int S_Move::kYFieldNumber;
const int S_Move::kVxFieldNumber;
const int S_Move::kVyFieldNumber;
const int S_Move::kAccelerationListFieldNumber;
#endif  // !_MSC_VER

S_Move::S_Move()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InGamePacket.S_Move)
}

void S_Move::InitAsDefaultInstance() {
}

S_Move::S_Move(const S_Move& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InGamePacket.S_Move)
}

void S_Move::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  x_ = 0;
  y_ = 0;
  vx_ = 0;
  vy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S_Move::~S_Move() {
  // @@protoc_insertion_point(destructor:InGamePacket.S_Move)
  SharedDtor();
}

void S_Move::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S_Move_descriptor_;
}

const S_Move& S_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InGamePacket_2eproto();
  return *default_instance_;
}

S_Move* S_Move::default_instance_ = NULL;

S_Move* S_Move::New(::google::protobuf::Arena* arena) const {
  S_Move* n = new S_Move;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S_Move::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<S_Move*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(uid_, vx_);
    vy_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  acceleration_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool S_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InGamePacket.S_Move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (tag == 21) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (tag == 29) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_vx;
        break;
      }

      // required float vx = 4;
      case 4: {
        if (tag == 37) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
          set_has_vx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_vy;
        break;
      }

      // required float vy = 5;
      case 5: {
        if (tag == 45) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
          set_has_vy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_acceleration_list;
        break;
      }

      // repeated .InGamePacket.S_Acceleration acceleration_list = 6;
      case 6: {
        if (tag == 50) {
         parse_acceleration_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_acceleration_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_acceleration_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_acceleration_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InGamePacket.S_Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InGamePacket.S_Move)
  return false;
#undef DO_
}

void S_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InGamePacket.S_Move)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // required float vx = 4;
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->vx(), output);
  }

  // required float vy = 5;
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->vy(), output);
  }

  // repeated .InGamePacket.S_Acceleration acceleration_list = 6;
  for (unsigned int i = 0, n = this->acceleration_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->acceleration_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InGamePacket.S_Move)
}

::google::protobuf::uint8* S_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InGamePacket.S_Move)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // required float vx = 4;
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->vx(), target);
  }

  // required float vy = 5;
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->vy(), target);
  }

  // repeated .InGamePacket.S_Acceleration acceleration_list = 6;
  for (unsigned int i = 0, n = this->acceleration_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->acceleration_list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InGamePacket.S_Move)
  return target;
}

int S_Move::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_x()) {
    // required float x = 2;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 3;
    total_size += 1 + 4;
  }

  if (has_vx()) {
    // required float vx = 4;
    total_size += 1 + 4;
  }

  if (has_vy()) {
    // required float vy = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
int S_Move::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required float x = 2;
    total_size += 1 + 4;

    // required float y = 3;
    total_size += 1 + 4;

    // required float vx = 4;
    total_size += 1 + 4;

    // required float vy = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .InGamePacket.S_Acceleration acceleration_list = 6;
  total_size += 1 * this->acceleration_list_size();
  for (int i = 0; i < this->acceleration_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acceleration_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S_Move::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const S_Move* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const S_Move>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S_Move::MergeFrom(const S_Move& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  acceleration_list_.MergeFrom(from.acceleration_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_vx()) {
      set_vx(from.vx());
    }
    if (from.has_vy()) {
      set_vy(from.vy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void S_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Move::CopyFrom(const S_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Move::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->acceleration_list())) return false;
  return true;
}

void S_Move::Swap(S_Move* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S_Move::InternalSwap(S_Move* other) {
  std::swap(uid_, other->uid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(vx_, other->vx_);
  std::swap(vy_, other->vy_);
  acceleration_list_.UnsafeArenaSwap(&other->acceleration_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S_Move_descriptor_;
  metadata.reflection = S_Move_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S_Move

// required uint32 uid = 1;
bool S_Move::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S_Move::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void S_Move::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void S_Move::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
 ::google::protobuf::uint32 S_Move::uid() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Move.uid)
  return uid_;
}
 void S_Move::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Move.uid)
}

// required float x = 2;
bool S_Move::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S_Move::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void S_Move::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void S_Move::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float S_Move::x() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Move.x)
  return x_;
}
 void S_Move::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Move.x)
}

// required float y = 3;
bool S_Move::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S_Move::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void S_Move::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void S_Move::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float S_Move::y() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Move.y)
  return y_;
}
 void S_Move::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Move.y)
}

// required float vx = 4;
bool S_Move::has_vx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void S_Move::set_has_vx() {
  _has_bits_[0] |= 0x00000008u;
}
void S_Move::clear_has_vx() {
  _has_bits_[0] &= ~0x00000008u;
}
void S_Move::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
 float S_Move::vx() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Move.vx)
  return vx_;
}
 void S_Move::set_vx(float value) {
  set_has_vx();
  vx_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Move.vx)
}

// required float vy = 5;
bool S_Move::has_vy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void S_Move::set_has_vy() {
  _has_bits_[0] |= 0x00000010u;
}
void S_Move::clear_has_vy() {
  _has_bits_[0] &= ~0x00000010u;
}
void S_Move::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
 float S_Move::vy() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Move.vy)
  return vy_;
}
 void S_Move::set_vy(float value) {
  set_has_vy();
  vy_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Move.vy)
}

// repeated .InGamePacket.S_Acceleration acceleration_list = 6;
int S_Move::acceleration_list_size() const {
  return acceleration_list_.size();
}
void S_Move::clear_acceleration_list() {
  acceleration_list_.Clear();
}
 const ::InGamePacket::S_Acceleration& S_Move::acceleration_list(int index) const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Move.acceleration_list)
  return acceleration_list_.Get(index);
}
 ::InGamePacket::S_Acceleration* S_Move::mutable_acceleration_list(int index) {
  // @@protoc_insertion_point(field_mutable:InGamePacket.S_Move.acceleration_list)
  return acceleration_list_.Mutable(index);
}
 ::InGamePacket::S_Acceleration* S_Move::add_acceleration_list() {
  // @@protoc_insertion_point(field_add:InGamePacket.S_Move.acceleration_list)
  return acceleration_list_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::InGamePacket::S_Acceleration >&
S_Move::acceleration_list() const {
  // @@protoc_insertion_point(field_list:InGamePacket.S_Move.acceleration_list)
  return acceleration_list_;
}
 ::google::protobuf::RepeatedPtrField< ::InGamePacket::S_Acceleration >*
S_Move::mutable_acceleration_list() {
  // @@protoc_insertion_point(field_mutable_list:InGamePacket.S_Move.acceleration_list)
  return &acceleration_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int C_Stop::kUidFieldNumber;
const int C_Stop::kXFieldNumber;
const int C_Stop::kYFieldNumber;
#endif  // !_MSC_VER

C_Stop::C_Stop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InGamePacket.C_Stop)
}

void C_Stop::InitAsDefaultInstance() {
}

C_Stop::C_Stop(const C_Stop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InGamePacket.C_Stop)
}

void C_Stop::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C_Stop::~C_Stop() {
  // @@protoc_insertion_point(destructor:InGamePacket.C_Stop)
  SharedDtor();
}

void C_Stop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C_Stop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C_Stop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C_Stop_descriptor_;
}

const C_Stop& C_Stop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InGamePacket_2eproto();
  return *default_instance_;
}

C_Stop* C_Stop::default_instance_ = NULL;

C_Stop* C_Stop::New(::google::protobuf::Arena* arena) const {
  C_Stop* n = new C_Stop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C_Stop::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<C_Stop*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C_Stop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InGamePacket.C_Stop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (tag == 21) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (tag == 29) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InGamePacket.C_Stop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InGamePacket.C_Stop)
  return false;
#undef DO_
}

void C_Stop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InGamePacket.C_Stop)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InGamePacket.C_Stop)
}

::google::protobuf::uint8* C_Stop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InGamePacket.C_Stop)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InGamePacket.C_Stop)
  return target;
}

int C_Stop::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_x()) {
    // required float x = 2;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int C_Stop::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required float x = 2;
    total_size += 1 + 4;

    // required float y = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C_Stop::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const C_Stop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const C_Stop>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C_Stop::MergeFrom(const C_Stop& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void C_Stop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Stop::CopyFrom(const C_Stop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Stop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C_Stop::Swap(C_Stop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C_Stop::InternalSwap(C_Stop* other) {
  std::swap(uid_, other->uid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C_Stop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C_Stop_descriptor_;
  metadata.reflection = C_Stop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C_Stop

// required uint32 uid = 1;
bool C_Stop::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void C_Stop::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void C_Stop::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void C_Stop::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
 ::google::protobuf::uint32 C_Stop::uid() const {
  // @@protoc_insertion_point(field_get:InGamePacket.C_Stop.uid)
  return uid_;
}
 void C_Stop::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.C_Stop.uid)
}

// required float x = 2;
bool C_Stop::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void C_Stop::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void C_Stop::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void C_Stop::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float C_Stop::x() const {
  // @@protoc_insertion_point(field_get:InGamePacket.C_Stop.x)
  return x_;
}
 void C_Stop::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.C_Stop.x)
}

// required float y = 3;
bool C_Stop::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void C_Stop::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void C_Stop::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void C_Stop::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float C_Stop::y() const {
  // @@protoc_insertion_point(field_get:InGamePacket.C_Stop.y)
  return y_;
}
 void C_Stop::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.C_Stop.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int S_Stop::kUidFieldNumber;
const int S_Stop::kXFieldNumber;
const int S_Stop::kYFieldNumber;
#endif  // !_MSC_VER

S_Stop::S_Stop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InGamePacket.S_Stop)
}

void S_Stop::InitAsDefaultInstance() {
}

S_Stop::S_Stop(const S_Stop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InGamePacket.S_Stop)
}

void S_Stop::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S_Stop::~S_Stop() {
  // @@protoc_insertion_point(destructor:InGamePacket.S_Stop)
  SharedDtor();
}

void S_Stop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S_Stop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S_Stop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S_Stop_descriptor_;
}

const S_Stop& S_Stop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InGamePacket_2eproto();
  return *default_instance_;
}

S_Stop* S_Stop::default_instance_ = NULL;

S_Stop* S_Stop::New(::google::protobuf::Arena* arena) const {
  S_Stop* n = new S_Stop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S_Stop::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<S_Stop*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool S_Stop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InGamePacket.S_Stop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (tag == 21) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (tag == 29) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InGamePacket.S_Stop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InGamePacket.S_Stop)
  return false;
#undef DO_
}

void S_Stop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InGamePacket.S_Stop)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InGamePacket.S_Stop)
}

::google::protobuf::uint8* S_Stop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InGamePacket.S_Stop)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InGamePacket.S_Stop)
  return target;
}

int S_Stop::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_x()) {
    // required float x = 2;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int S_Stop::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required float x = 2;
    total_size += 1 + 4;

    // required float y = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S_Stop::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const S_Stop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const S_Stop>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S_Stop::MergeFrom(const S_Stop& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void S_Stop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Stop::CopyFrom(const S_Stop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Stop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S_Stop::Swap(S_Stop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S_Stop::InternalSwap(S_Stop* other) {
  std::swap(uid_, other->uid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S_Stop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S_Stop_descriptor_;
  metadata.reflection = S_Stop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S_Stop

// required uint32 uid = 1;
bool S_Stop::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S_Stop::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void S_Stop::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void S_Stop::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
 ::google::protobuf::uint32 S_Stop::uid() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Stop.uid)
  return uid_;
}
 void S_Stop::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Stop.uid)
}

// required float x = 2;
bool S_Stop::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S_Stop::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void S_Stop::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void S_Stop::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float S_Stop::x() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Stop.x)
  return x_;
}
 void S_Stop::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Stop.x)
}

// required float y = 3;
bool S_Stop::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S_Stop::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void S_Stop::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void S_Stop::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float S_Stop::y() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Stop.y)
  return y_;
}
 void S_Stop::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Stop.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int C_Shoot::kUidFieldNumber;
const int C_Shoot::kUnitVxFieldNumber;
const int C_Shoot::kUnitVyFieldNumber;
#endif  // !_MSC_VER

C_Shoot::C_Shoot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InGamePacket.C_Shoot)
}

void C_Shoot::InitAsDefaultInstance() {
}

C_Shoot::C_Shoot(const C_Shoot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InGamePacket.C_Shoot)
}

void C_Shoot::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  unit_vx_ = 0;
  unit_vy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C_Shoot::~C_Shoot() {
  // @@protoc_insertion_point(destructor:InGamePacket.C_Shoot)
  SharedDtor();
}

void C_Shoot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C_Shoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C_Shoot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C_Shoot_descriptor_;
}

const C_Shoot& C_Shoot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InGamePacket_2eproto();
  return *default_instance_;
}

C_Shoot* C_Shoot::default_instance_ = NULL;

C_Shoot* C_Shoot::New(::google::protobuf::Arena* arena) const {
  C_Shoot* n = new C_Shoot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C_Shoot::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<C_Shoot*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, unit_vy_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C_Shoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InGamePacket.C_Shoot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_unit_vx;
        break;
      }

      // required float unit_vx = 2;
      case 2: {
        if (tag == 21) {
         parse_unit_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unit_vx_)));
          set_has_unit_vx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_unit_vy;
        break;
      }

      // required float unit_vy = 3;
      case 3: {
        if (tag == 29) {
         parse_unit_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unit_vy_)));
          set_has_unit_vy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InGamePacket.C_Shoot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InGamePacket.C_Shoot)
  return false;
#undef DO_
}

void C_Shoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InGamePacket.C_Shoot)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required float unit_vx = 2;
  if (has_unit_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->unit_vx(), output);
  }

  // required float unit_vy = 3;
  if (has_unit_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->unit_vy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InGamePacket.C_Shoot)
}

::google::protobuf::uint8* C_Shoot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InGamePacket.C_Shoot)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required float unit_vx = 2;
  if (has_unit_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->unit_vx(), target);
  }

  // required float unit_vy = 3;
  if (has_unit_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->unit_vy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InGamePacket.C_Shoot)
  return target;
}

int C_Shoot::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_unit_vx()) {
    // required float unit_vx = 2;
    total_size += 1 + 4;
  }

  if (has_unit_vy()) {
    // required float unit_vy = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int C_Shoot::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required float unit_vx = 2;
    total_size += 1 + 4;

    // required float unit_vy = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C_Shoot::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const C_Shoot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const C_Shoot>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C_Shoot::MergeFrom(const C_Shoot& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_unit_vx()) {
      set_unit_vx(from.unit_vx());
    }
    if (from.has_unit_vy()) {
      set_unit_vy(from.unit_vy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void C_Shoot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Shoot::CopyFrom(const C_Shoot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Shoot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C_Shoot::Swap(C_Shoot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C_Shoot::InternalSwap(C_Shoot* other) {
  std::swap(uid_, other->uid_);
  std::swap(unit_vx_, other->unit_vx_);
  std::swap(unit_vy_, other->unit_vy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C_Shoot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C_Shoot_descriptor_;
  metadata.reflection = C_Shoot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C_Shoot

// required uint32 uid = 1;
bool C_Shoot::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void C_Shoot::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void C_Shoot::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void C_Shoot::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
 ::google::protobuf::uint32 C_Shoot::uid() const {
  // @@protoc_insertion_point(field_get:InGamePacket.C_Shoot.uid)
  return uid_;
}
 void C_Shoot::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.C_Shoot.uid)
}

// required float unit_vx = 2;
bool C_Shoot::has_unit_vx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void C_Shoot::set_has_unit_vx() {
  _has_bits_[0] |= 0x00000002u;
}
void C_Shoot::clear_has_unit_vx() {
  _has_bits_[0] &= ~0x00000002u;
}
void C_Shoot::clear_unit_vx() {
  unit_vx_ = 0;
  clear_has_unit_vx();
}
 float C_Shoot::unit_vx() const {
  // @@protoc_insertion_point(field_get:InGamePacket.C_Shoot.unit_vx)
  return unit_vx_;
}
 void C_Shoot::set_unit_vx(float value) {
  set_has_unit_vx();
  unit_vx_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.C_Shoot.unit_vx)
}

// required float unit_vy = 3;
bool C_Shoot::has_unit_vy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void C_Shoot::set_has_unit_vy() {
  _has_bits_[0] |= 0x00000004u;
}
void C_Shoot::clear_has_unit_vy() {
  _has_bits_[0] &= ~0x00000004u;
}
void C_Shoot::clear_unit_vy() {
  unit_vy_ = 0;
  clear_has_unit_vy();
}
 float C_Shoot::unit_vy() const {
  // @@protoc_insertion_point(field_get:InGamePacket.C_Shoot.unit_vy)
  return unit_vy_;
}
 void C_Shoot::set_unit_vy(float value) {
  set_has_unit_vy();
  unit_vy_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.C_Shoot.unit_vy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int S_Shoot::kUidFieldNumber;
const int S_Shoot::kBulletUidFieldNumber;
const int S_Shoot::kXFieldNumber;
const int S_Shoot::kYFieldNumber;
const int S_Shoot::kDamageFieldNumber;
const int S_Shoot::kVxFieldNumber;
const int S_Shoot::kVyFieldNumber;
const int S_Shoot::kAccelerationListFieldNumber;
#endif  // !_MSC_VER

S_Shoot::S_Shoot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InGamePacket.S_Shoot)
}

void S_Shoot::InitAsDefaultInstance() {
}

S_Shoot::S_Shoot(const S_Shoot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InGamePacket.S_Shoot)
}

void S_Shoot::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  bullet_uid_ = 0u;
  x_ = 0;
  y_ = 0;
  damage_ = 0;
  vx_ = 0;
  vy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S_Shoot::~S_Shoot() {
  // @@protoc_insertion_point(destructor:InGamePacket.S_Shoot)
  SharedDtor();
}

void S_Shoot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S_Shoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S_Shoot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S_Shoot_descriptor_;
}

const S_Shoot& S_Shoot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InGamePacket_2eproto();
  return *default_instance_;
}

S_Shoot* S_Shoot::default_instance_ = NULL;

S_Shoot* S_Shoot::New(::google::protobuf::Arena* arena) const {
  S_Shoot* n = new S_Shoot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S_Shoot::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<S_Shoot*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(uid_, vx_);
    vy_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  acceleration_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool S_Shoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InGamePacket.S_Shoot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bullet_uid;
        break;
      }

      // required uint32 bullet_uid = 2;
      case 2: {
        if (tag == 16) {
         parse_bullet_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_uid_)));
          set_has_bullet_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }

      // required float x = 3;
      case 3: {
        if (tag == 29) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }

      // required float y = 4;
      case 4: {
        if (tag == 37) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_damage;
        break;
      }

      // required float damage = 5;
      case 5: {
        if (tag == 45) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_vx;
        break;
      }

      // required float vx = 6;
      case 6: {
        if (tag == 53) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
          set_has_vx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_vy;
        break;
      }

      // required float vy = 7;
      case 7: {
        if (tag == 61) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
          set_has_vy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_acceleration_list;
        break;
      }

      // repeated .InGamePacket.S_Acceleration acceleration_list = 8;
      case 8: {
        if (tag == 66) {
         parse_acceleration_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_acceleration_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_acceleration_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_acceleration_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InGamePacket.S_Shoot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InGamePacket.S_Shoot)
  return false;
#undef DO_
}

void S_Shoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InGamePacket.S_Shoot)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 bullet_uid = 2;
  if (has_bullet_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bullet_uid(), output);
  }

  // required float x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // required float y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // required float damage = 5;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->damage(), output);
  }

  // required float vx = 6;
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vx(), output);
  }

  // required float vy = 7;
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->vy(), output);
  }

  // repeated .InGamePacket.S_Acceleration acceleration_list = 8;
  for (unsigned int i = 0, n = this->acceleration_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->acceleration_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InGamePacket.S_Shoot)
}

::google::protobuf::uint8* S_Shoot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InGamePacket.S_Shoot)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 bullet_uid = 2;
  if (has_bullet_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bullet_uid(), target);
  }

  // required float x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // required float y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // required float damage = 5;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->damage(), target);
  }

  // required float vx = 6;
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vx(), target);
  }

  // required float vy = 7;
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->vy(), target);
  }

  // repeated .InGamePacket.S_Acceleration acceleration_list = 8;
  for (unsigned int i = 0, n = this->acceleration_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->acceleration_list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InGamePacket.S_Shoot)
  return target;
}

int S_Shoot::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_bullet_uid()) {
    // required uint32 bullet_uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bullet_uid());
  }

  if (has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (has_damage()) {
    // required float damage = 5;
    total_size += 1 + 4;
  }

  if (has_vx()) {
    // required float vx = 6;
    total_size += 1 + 4;
  }

  if (has_vy()) {
    // required float vy = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
int S_Shoot::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required uint32 bullet_uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bullet_uid());

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required float damage = 5;
    total_size += 1 + 4;

    // required float vx = 6;
    total_size += 1 + 4;

    // required float vy = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .InGamePacket.S_Acceleration acceleration_list = 8;
  total_size += 1 * this->acceleration_list_size();
  for (int i = 0; i < this->acceleration_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acceleration_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S_Shoot::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const S_Shoot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const S_Shoot>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S_Shoot::MergeFrom(const S_Shoot& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  acceleration_list_.MergeFrom(from.acceleration_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_bullet_uid()) {
      set_bullet_uid(from.bullet_uid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_vx()) {
      set_vx(from.vx());
    }
    if (from.has_vy()) {
      set_vy(from.vy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void S_Shoot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Shoot::CopyFrom(const S_Shoot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Shoot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->acceleration_list())) return false;
  return true;
}

void S_Shoot::Swap(S_Shoot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S_Shoot::InternalSwap(S_Shoot* other) {
  std::swap(uid_, other->uid_);
  std::swap(bullet_uid_, other->bullet_uid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(damage_, other->damage_);
  std::swap(vx_, other->vx_);
  std::swap(vy_, other->vy_);
  acceleration_list_.UnsafeArenaSwap(&other->acceleration_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S_Shoot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S_Shoot_descriptor_;
  metadata.reflection = S_Shoot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S_Shoot

// required uint32 uid = 1;
bool S_Shoot::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S_Shoot::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void S_Shoot::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void S_Shoot::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
 ::google::protobuf::uint32 S_Shoot::uid() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Shoot.uid)
  return uid_;
}
 void S_Shoot::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Shoot.uid)
}

// required uint32 bullet_uid = 2;
bool S_Shoot::has_bullet_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S_Shoot::set_has_bullet_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void S_Shoot::clear_has_bullet_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void S_Shoot::clear_bullet_uid() {
  bullet_uid_ = 0u;
  clear_has_bullet_uid();
}
 ::google::protobuf::uint32 S_Shoot::bullet_uid() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Shoot.bullet_uid)
  return bullet_uid_;
}
 void S_Shoot::set_bullet_uid(::google::protobuf::uint32 value) {
  set_has_bullet_uid();
  bullet_uid_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Shoot.bullet_uid)
}

// required float x = 3;
bool S_Shoot::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S_Shoot::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void S_Shoot::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void S_Shoot::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float S_Shoot::x() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Shoot.x)
  return x_;
}
 void S_Shoot::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Shoot.x)
}

// required float y = 4;
bool S_Shoot::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void S_Shoot::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void S_Shoot::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void S_Shoot::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float S_Shoot::y() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Shoot.y)
  return y_;
}
 void S_Shoot::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Shoot.y)
}

// required float damage = 5;
bool S_Shoot::has_damage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void S_Shoot::set_has_damage() {
  _has_bits_[0] |= 0x00000010u;
}
void S_Shoot::clear_has_damage() {
  _has_bits_[0] &= ~0x00000010u;
}
void S_Shoot::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
 float S_Shoot::damage() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Shoot.damage)
  return damage_;
}
 void S_Shoot::set_damage(float value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Shoot.damage)
}

// required float vx = 6;
bool S_Shoot::has_vx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void S_Shoot::set_has_vx() {
  _has_bits_[0] |= 0x00000020u;
}
void S_Shoot::clear_has_vx() {
  _has_bits_[0] &= ~0x00000020u;
}
void S_Shoot::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
 float S_Shoot::vx() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Shoot.vx)
  return vx_;
}
 void S_Shoot::set_vx(float value) {
  set_has_vx();
  vx_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Shoot.vx)
}

// required float vy = 7;
bool S_Shoot::has_vy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void S_Shoot::set_has_vy() {
  _has_bits_[0] |= 0x00000040u;
}
void S_Shoot::clear_has_vy() {
  _has_bits_[0] &= ~0x00000040u;
}
void S_Shoot::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
 float S_Shoot::vy() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Shoot.vy)
  return vy_;
}
 void S_Shoot::set_vy(float value) {
  set_has_vy();
  vy_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Shoot.vy)
}

// repeated .InGamePacket.S_Acceleration acceleration_list = 8;
int S_Shoot::acceleration_list_size() const {
  return acceleration_list_.size();
}
void S_Shoot::clear_acceleration_list() {
  acceleration_list_.Clear();
}
 const ::InGamePacket::S_Acceleration& S_Shoot::acceleration_list(int index) const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Shoot.acceleration_list)
  return acceleration_list_.Get(index);
}
 ::InGamePacket::S_Acceleration* S_Shoot::mutable_acceleration_list(int index) {
  // @@protoc_insertion_point(field_mutable:InGamePacket.S_Shoot.acceleration_list)
  return acceleration_list_.Mutable(index);
}
 ::InGamePacket::S_Acceleration* S_Shoot::add_acceleration_list() {
  // @@protoc_insertion_point(field_add:InGamePacket.S_Shoot.acceleration_list)
  return acceleration_list_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::InGamePacket::S_Acceleration >&
S_Shoot::acceleration_list() const {
  // @@protoc_insertion_point(field_list:InGamePacket.S_Shoot.acceleration_list)
  return acceleration_list_;
}
 ::google::protobuf::RepeatedPtrField< ::InGamePacket::S_Acceleration >*
S_Shoot::mutable_acceleration_list() {
  // @@protoc_insertion_point(field_mutable_list:InGamePacket.S_Shoot.acceleration_list)
  return &acceleration_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int C_Collision::kUid1FieldNumber;
const int C_Collision::kUid2FieldNumber;
#endif  // !_MSC_VER

C_Collision::C_Collision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InGamePacket.C_Collision)
}

void C_Collision::InitAsDefaultInstance() {
}

C_Collision::C_Collision(const C_Collision& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InGamePacket.C_Collision)
}

void C_Collision::SharedCtor() {
  _cached_size_ = 0;
  uid1_ = 0u;
  uid2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C_Collision::~C_Collision() {
  // @@protoc_insertion_point(destructor:InGamePacket.C_Collision)
  SharedDtor();
}

void C_Collision::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C_Collision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C_Collision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C_Collision_descriptor_;
}

const C_Collision& C_Collision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InGamePacket_2eproto();
  return *default_instance_;
}

C_Collision* C_Collision::default_instance_ = NULL;

C_Collision* C_Collision::New(::google::protobuf::Arena* arena) const {
  C_Collision* n = new C_Collision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C_Collision::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<C_Collision*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid1_, uid2_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C_Collision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InGamePacket.C_Collision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid1_)));
          set_has_uid1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid2;
        break;
      }

      // optional uint32 uid2 = 2;
      case 2: {
        if (tag == 16) {
         parse_uid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid2_)));
          set_has_uid2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InGamePacket.C_Collision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InGamePacket.C_Collision)
  return false;
#undef DO_
}

void C_Collision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InGamePacket.C_Collision)
  // required uint32 uid1 = 1;
  if (has_uid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid1(), output);
  }

  // optional uint32 uid2 = 2;
  if (has_uid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InGamePacket.C_Collision)
}

::google::protobuf::uint8* C_Collision::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InGamePacket.C_Collision)
  // required uint32 uid1 = 1;
  if (has_uid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid1(), target);
  }

  // optional uint32 uid2 = 2;
  if (has_uid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InGamePacket.C_Collision)
  return target;
}

int C_Collision::ByteSize() const {
  int total_size = 0;

  // required uint32 uid1 = 1;
  if (has_uid1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid1());
  }
  // optional uint32 uid2 = 2;
  if (has_uid2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid2());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C_Collision::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const C_Collision* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const C_Collision>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C_Collision::MergeFrom(const C_Collision& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid1()) {
      set_uid1(from.uid1());
    }
    if (from.has_uid2()) {
      set_uid2(from.uid2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void C_Collision::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Collision::CopyFrom(const C_Collision& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Collision::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C_Collision::Swap(C_Collision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C_Collision::InternalSwap(C_Collision* other) {
  std::swap(uid1_, other->uid1_);
  std::swap(uid2_, other->uid2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C_Collision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C_Collision_descriptor_;
  metadata.reflection = C_Collision_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C_Collision

// required uint32 uid1 = 1;
bool C_Collision::has_uid1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void C_Collision::set_has_uid1() {
  _has_bits_[0] |= 0x00000001u;
}
void C_Collision::clear_has_uid1() {
  _has_bits_[0] &= ~0x00000001u;
}
void C_Collision::clear_uid1() {
  uid1_ = 0u;
  clear_has_uid1();
}
 ::google::protobuf::uint32 C_Collision::uid1() const {
  // @@protoc_insertion_point(field_get:InGamePacket.C_Collision.uid1)
  return uid1_;
}
 void C_Collision::set_uid1(::google::protobuf::uint32 value) {
  set_has_uid1();
  uid1_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.C_Collision.uid1)
}

// optional uint32 uid2 = 2;
bool C_Collision::has_uid2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void C_Collision::set_has_uid2() {
  _has_bits_[0] |= 0x00000002u;
}
void C_Collision::clear_has_uid2() {
  _has_bits_[0] &= ~0x00000002u;
}
void C_Collision::clear_uid2() {
  uid2_ = 0u;
  clear_has_uid2();
}
 ::google::protobuf::uint32 C_Collision::uid2() const {
  // @@protoc_insertion_point(field_get:InGamePacket.C_Collision.uid2)
  return uid2_;
}
 void C_Collision::set_uid2(::google::protobuf::uint32 value) {
  set_has_uid2();
  uid2_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.C_Collision.uid2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int S_Collision::kUid1FieldNumber;
const int S_Collision::kUid2FieldNumber;
const int S_Collision::kHpFieldNumber;
const int S_Collision::kXFieldNumber;
const int S_Collision::kYFieldNumber;
#endif  // !_MSC_VER

S_Collision::S_Collision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InGamePacket.S_Collision)
}

void S_Collision::InitAsDefaultInstance() {
}

S_Collision::S_Collision(const S_Collision& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InGamePacket.S_Collision)
}

void S_Collision::SharedCtor() {
  _cached_size_ = 0;
  uid1_ = 0u;
  uid2_ = 0u;
  hp_ = 0u;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S_Collision::~S_Collision() {
  // @@protoc_insertion_point(destructor:InGamePacket.S_Collision)
  SharedDtor();
}

void S_Collision::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S_Collision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S_Collision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S_Collision_descriptor_;
}

const S_Collision& S_Collision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InGamePacket_2eproto();
  return *default_instance_;
}

S_Collision* S_Collision::default_instance_ = NULL;

S_Collision* S_Collision::New(::google::protobuf::Arena* arena) const {
  S_Collision* n = new S_Collision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S_Collision::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<S_Collision*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(uid1_, y_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool S_Collision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InGamePacket.S_Collision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid1_)));
          set_has_uid1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid2;
        break;
      }

      // optional uint32 uid2 = 2;
      case 2: {
        if (tag == 16) {
         parse_uid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid2_)));
          set_has_uid2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 3;
      case 3: {
        if (tag == 24) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_x;
        break;
      }

      // optional float x = 4;
      case 4: {
        if (tag == 37) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_y;
        break;
      }

      // optional float y = 5;
      case 5: {
        if (tag == 45) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InGamePacket.S_Collision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InGamePacket.S_Collision)
  return false;
#undef DO_
}

void S_Collision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InGamePacket.S_Collision)
  // required uint32 uid1 = 1;
  if (has_uid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid1(), output);
  }

  // optional uint32 uid2 = 2;
  if (has_uid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid2(), output);
  }

  // optional uint32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp(), output);
  }

  // optional float x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InGamePacket.S_Collision)
}

::google::protobuf::uint8* S_Collision::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InGamePacket.S_Collision)
  // required uint32 uid1 = 1;
  if (has_uid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid1(), target);
  }

  // optional uint32 uid2 = 2;
  if (has_uid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid2(), target);
  }

  // optional uint32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hp(), target);
  }

  // optional float x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InGamePacket.S_Collision)
  return target;
}

int S_Collision::ByteSize() const {
  int total_size = 0;

  // required uint32 uid1 = 1;
  if (has_uid1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid1());
  }
  if (_has_bits_[1 / 32] & 30) {
    // optional uint32 uid2 = 2;
    if (has_uid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid2());
    }

    // optional uint32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional float x = 4;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 5;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S_Collision::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const S_Collision* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const S_Collision>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S_Collision::MergeFrom(const S_Collision& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid1()) {
      set_uid1(from.uid1());
    }
    if (from.has_uid2()) {
      set_uid2(from.uid2());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void S_Collision::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Collision::CopyFrom(const S_Collision& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Collision::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S_Collision::Swap(S_Collision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S_Collision::InternalSwap(S_Collision* other) {
  std::swap(uid1_, other->uid1_);
  std::swap(uid2_, other->uid2_);
  std::swap(hp_, other->hp_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S_Collision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S_Collision_descriptor_;
  metadata.reflection = S_Collision_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S_Collision

// required uint32 uid1 = 1;
bool S_Collision::has_uid1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S_Collision::set_has_uid1() {
  _has_bits_[0] |= 0x00000001u;
}
void S_Collision::clear_has_uid1() {
  _has_bits_[0] &= ~0x00000001u;
}
void S_Collision::clear_uid1() {
  uid1_ = 0u;
  clear_has_uid1();
}
 ::google::protobuf::uint32 S_Collision::uid1() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Collision.uid1)
  return uid1_;
}
 void S_Collision::set_uid1(::google::protobuf::uint32 value) {
  set_has_uid1();
  uid1_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Collision.uid1)
}

// optional uint32 uid2 = 2;
bool S_Collision::has_uid2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S_Collision::set_has_uid2() {
  _has_bits_[0] |= 0x00000002u;
}
void S_Collision::clear_has_uid2() {
  _has_bits_[0] &= ~0x00000002u;
}
void S_Collision::clear_uid2() {
  uid2_ = 0u;
  clear_has_uid2();
}
 ::google::protobuf::uint32 S_Collision::uid2() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Collision.uid2)
  return uid2_;
}
 void S_Collision::set_uid2(::google::protobuf::uint32 value) {
  set_has_uid2();
  uid2_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Collision.uid2)
}

// optional uint32 hp = 3;
bool S_Collision::has_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S_Collision::set_has_hp() {
  _has_bits_[0] |= 0x00000004u;
}
void S_Collision::clear_has_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
void S_Collision::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
 ::google::protobuf::uint32 S_Collision::hp() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Collision.hp)
  return hp_;
}
 void S_Collision::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Collision.hp)
}

// optional float x = 4;
bool S_Collision::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void S_Collision::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
void S_Collision::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void S_Collision::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float S_Collision::x() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Collision.x)
  return x_;
}
 void S_Collision::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Collision.x)
}

// optional float y = 5;
bool S_Collision::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void S_Collision::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
void S_Collision::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
void S_Collision::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float S_Collision::y() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Collision.y)
  return y_;
}
 void S_Collision::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Collision.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int C_Respawn::kUidFieldNumber;
#endif  // !_MSC_VER

C_Respawn::C_Respawn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InGamePacket.C_Respawn)
}

void C_Respawn::InitAsDefaultInstance() {
}

C_Respawn::C_Respawn(const C_Respawn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InGamePacket.C_Respawn)
}

void C_Respawn::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C_Respawn::~C_Respawn() {
  // @@protoc_insertion_point(destructor:InGamePacket.C_Respawn)
  SharedDtor();
}

void C_Respawn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C_Respawn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C_Respawn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C_Respawn_descriptor_;
}

const C_Respawn& C_Respawn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InGamePacket_2eproto();
  return *default_instance_;
}

C_Respawn* C_Respawn::default_instance_ = NULL;

C_Respawn* C_Respawn::New(::google::protobuf::Arena* arena) const {
  C_Respawn* n = new C_Respawn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C_Respawn::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C_Respawn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InGamePacket.C_Respawn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InGamePacket.C_Respawn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InGamePacket.C_Respawn)
  return false;
#undef DO_
}

void C_Respawn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InGamePacket.C_Respawn)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InGamePacket.C_Respawn)
}

::google::protobuf::uint8* C_Respawn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InGamePacket.C_Respawn)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InGamePacket.C_Respawn)
  return target;
}

int C_Respawn::ByteSize() const {
  int total_size = 0;

  // required uint32 uid = 1;
  if (has_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C_Respawn::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const C_Respawn* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const C_Respawn>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C_Respawn::MergeFrom(const C_Respawn& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void C_Respawn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Respawn::CopyFrom(const C_Respawn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Respawn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C_Respawn::Swap(C_Respawn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C_Respawn::InternalSwap(C_Respawn* other) {
  std::swap(uid_, other->uid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C_Respawn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C_Respawn_descriptor_;
  metadata.reflection = C_Respawn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C_Respawn

// required uint32 uid = 1;
bool C_Respawn::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void C_Respawn::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void C_Respawn::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void C_Respawn::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
 ::google::protobuf::uint32 C_Respawn::uid() const {
  // @@protoc_insertion_point(field_get:InGamePacket.C_Respawn.uid)
  return uid_;
}
 void C_Respawn::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.C_Respawn.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int S_Respawn::kUidFieldNumber;
const int S_Respawn::kXFieldNumber;
const int S_Respawn::kYFieldNumber;
const int S_Respawn::kHpFieldNumber;
#endif  // !_MSC_VER

S_Respawn::S_Respawn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InGamePacket.S_Respawn)
}

void S_Respawn::InitAsDefaultInstance() {
}

S_Respawn::S_Respawn(const S_Respawn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InGamePacket.S_Respawn)
}

void S_Respawn::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  x_ = 0;
  y_ = 0;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S_Respawn::~S_Respawn() {
  // @@protoc_insertion_point(destructor:InGamePacket.S_Respawn)
  SharedDtor();
}

void S_Respawn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S_Respawn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S_Respawn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S_Respawn_descriptor_;
}

const S_Respawn& S_Respawn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InGamePacket_2eproto();
  return *default_instance_;
}

S_Respawn* S_Respawn::default_instance_ = NULL;

S_Respawn* S_Respawn::New(::google::protobuf::Arena* arena) const {
  S_Respawn* n = new S_Respawn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S_Respawn::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<S_Respawn*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, hp_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool S_Respawn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InGamePacket.S_Respawn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (tag == 21) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (tag == 29) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // required uint32 hp = 4;
      case 4: {
        if (tag == 32) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InGamePacket.S_Respawn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InGamePacket.S_Respawn)
  return false;
#undef DO_
}

void S_Respawn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InGamePacket.S_Respawn)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // required uint32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InGamePacket.S_Respawn)
}

::google::protobuf::uint8* S_Respawn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InGamePacket.S_Respawn)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // required uint32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InGamePacket.S_Respawn)
  return target;
}

int S_Respawn::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_x()) {
    // required float x = 2;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 3;
    total_size += 1 + 4;
  }

  if (has_hp()) {
    // required uint32 hp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hp());
  }

  return total_size;
}
int S_Respawn::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required float x = 2;
    total_size += 1 + 4;

    // required float y = 3;
    total_size += 1 + 4;

    // required uint32 hp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S_Respawn::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const S_Respawn* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const S_Respawn>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S_Respawn::MergeFrom(const S_Respawn& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void S_Respawn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Respawn::CopyFrom(const S_Respawn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Respawn::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S_Respawn::Swap(S_Respawn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S_Respawn::InternalSwap(S_Respawn* other) {
  std::swap(uid_, other->uid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(hp_, other->hp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S_Respawn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S_Respawn_descriptor_;
  metadata.reflection = S_Respawn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S_Respawn

// required uint32 uid = 1;
bool S_Respawn::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S_Respawn::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void S_Respawn::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void S_Respawn::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
 ::google::protobuf::uint32 S_Respawn::uid() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Respawn.uid)
  return uid_;
}
 void S_Respawn::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Respawn.uid)
}

// required float x = 2;
bool S_Respawn::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S_Respawn::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void S_Respawn::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void S_Respawn::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float S_Respawn::x() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Respawn.x)
  return x_;
}
 void S_Respawn::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Respawn.x)
}

// required float y = 3;
bool S_Respawn::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S_Respawn::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void S_Respawn::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void S_Respawn::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float S_Respawn::y() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Respawn.y)
  return y_;
}
 void S_Respawn::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Respawn.y)
}

// required uint32 hp = 4;
bool S_Respawn::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void S_Respawn::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
void S_Respawn::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
void S_Respawn::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
 ::google::protobuf::uint32 S_Respawn::hp() const {
  // @@protoc_insertion_point(field_get:InGamePacket.S_Respawn.hp)
  return hp_;
}
 void S_Respawn::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:InGamePacket.S_Respawn.hp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace InGamePacket

// @@protoc_insertion_point(global_scope)
